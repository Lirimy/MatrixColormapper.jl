import ColorTypes: Colorant, RGB
import ColorSchemes: colormap
import IndirectArrays: IndirectArray
import MappedArrays: mappedarray
import FileIO: open, close, save, @format_str, Stream

const CURRENT_COLORMAP = colormap("Blues", 256)
current_colormap() = CURRENT_COLORMAP

function set_colormap(cmap::AbstractVector{T}) where T <:Colorant
    
    if(length(cmap) == 256)
        @. CURRENT_COLORMAP = RGB(cmap)
    else
        CURRENT_COLORMAP .= get(RGB.(cmap), [0:255;]/255)
    end
    CURRENT_COLORMAP
end

"""
```
matshow(A::Matrix{T<:Real}; cmap=current_colormap())
```
Return an RGB image generated by applying the colormap to the 2D input data.
The values assumed to be the range between 0.0-1.0.

# Examples

```
matshow(rand(100, 100))
```
"""

function matshow(A::AbstractMatrix{T}; cmap=current_colormap()) where T <: Real
    @assert length(cmap) == 256 "Colormap's length must be 256, got $(length(cmap))"
    
    f = s -> clamp(ceil(Int, 256*s), 1, 256)
    IndirectArray(mappedarray(f, A), cmap)
end

file_extension(fn) = lowercase(Base.Filesystem.splitext(fn)[2][2:end])

struct AnimationFile
    filename::String
end

function Base.show(io::IO, ::MIME"text/html", anim::AnimationFile)
    ext = file_extension(anim.filename)

    if ext == "mp4"
        write(io, "<video controls><source src=\"$(relpath(anim.filename))?$(rand())>\" type=\"video/mp4\"></video>")
    elseif ext == "gif"
        write(io, "<img src=\"$(relpath(anim.filename))?$(rand())>\" />")
    else
        error("Only support mp4/gif: $ext")
    end
    
    nothing
end

"""
```
openanim(f::Function, filename="out.mp4")
```
Generate animation file in mp4/gif format according to file extension.
Open a pipe connecting to ffmpeg input.
Recommend to use in `do ... end` sentence.

# Examples

```
openanim("test.gif") do aio
    for i in 1:10
        img = matshow(rand(100, 100))
        addframe(aio, img)
    end
end
```
"""

function openanim(f::Function, filename::String="out.mp4")
    filename = abspath(filename)
    ext = file_extension(filename)
    
    if ext == "mp4"
        open(f, `ffmpeg -v 0 -i pipe:0 -pix_fmt yuv420p -y $filename`, "w")
        return AnimationFile(filename)
    elseif ext == "gif"
        palette = tempname() * ".bmp"
        save(palette, IndirectArray(reshape(1:256, 16, 16)', current_colormap()))
        open(f, `ffmpeg -v 0 -i pipe:0 -i $palette -lavfi paletteuse=dither=sierra2_4a -y $filename`, "w")
        return AnimationFile(filename)
    else
        error("Only support mp4/gif: $ext")
    end
end

"""
```
addframe(io, img::Matrix)
```

Save an image to stream in BMP format.
"""

function addframe(io, img::AbstractMatrix)
    save(Stream(format"BMP", io), img)
end
